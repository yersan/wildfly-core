# Copyright 2023 Red Hat, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#  http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

installer.description=\
  The 'installer' command allows users to update or rollback installations provisioned with an Installation Manager CLI tool. With this command you can \
  also verify the history of updates and can generate metadata to replicate the current server installation in a different machine. The use of this command \
  requires a connection to a running server, and it is not available for embedded server and host controllers.\
  \n\
  The primary objective of this command is to remotely update or revert installations by using a jboss-cli interactive session. If you are updating or reverting a local \
  installation, the Installation Manager CLI tool is more appropriate and recommended for this purpose.


# Generic Host

installer.abstract-inst-mgr-cmd.option.host.description=\
  May appear only in the domain mode and is not allowed in the standalone mode. The argument expects the name of the host where this operation will take effect.


# Channel Add
installer.channel-add.description=\
  Subscribes the installation to a new channel.

installer.channel-add.option.channel-name.description=\
  Channel name is a human-readable one-line description of the channel to add.

installer.channel-add.option.manifest.description=\
  Location of a Manifest that defines the content of channel. This can be either a file path, URL or Maven GAV coordinate (groupId:artifactId:version).\
  If version is omitted in the GAV, the latest available manifest is used, otherwise a requested version of manifest will be used.

installer.channel-add.option.repositories.description=\
  A collection of Maven repositories that contains the artifacts associated with the channel. Multiple repositories are separated by comma. \
  Valid values are either URLs or ID::URL pairs.


# Channel Edit
installer.channel-edit.description=\
  Edit a channel subscription.

installer.channel-edit.option.channel-name.description=\
  Channel name is a human-readable one-line description of the channel to edit.

installer.channel-edit.option.manifest.description=\
  Location of a Manifest that defines the content of channel. This can be either a file path, URL or Maven GAV coordinate (groupId:artifactId:version).\
  If version is omitted in the GAV, the latest available manifest is used, otherwise a requested version of manifest will be used.

installer.channel-edit.option.repositories.description=\
  A collection of Maven repositories that contains the artifacts associated with the channel. Multiple repositories are separated by comma. \
  Valid values are either URLs or ID::URL pairs.

# Channel List
installer.channel-list.description=\
  List channels subscribed to by the installation.


# Channel Remove
installer.channel-remove.description=\
  Unsubscribe the installation from a channel.

installer.channel-remove.option.channel-name.description=\
  Channel name is a human-readable one-line description of the channel to remove.


# Clean
installer.clean.description=\
  Clean installation manager content. When using without any argument, this command will delete from the server any installation prepared and pending\
  to be applied.

installer.clean.option.custom-patch-manifest.description=\
  Manifest artifact location expressed as GA (GroupId:aritfactId) maven coordinate.

# History
installer.history.description=\
  List previous installation states.

installer.history.option.revision.description=\
  Hash of an installation state. When using the revision argument, a detailed description about the changes made in that revision will be displayed.

# Revert
installer.revert.description=\
  Reverts to a previous installation state.\
  \n\
  \n\
  Prepare-Revert: This phase prepares the installation you want to revert to. The candidate installation will be prepared on the target installation temporal directory \
  (jboss.domain.temp.dir on domain mode or jboss.server.temp.dir on standalone server mode). Once this phase is completed, no further preparations can be made. \
  If you decide to discard this candidate installation, you can use the 'clean' operation at any time. \
  \n\
  \n\
  Apply-Revert: Once the candidate installation is prepared, you can apply it by using the 'shutdown --perform-installation' command. This command \
  will restart the server and apply the candidate installation.\
  \n\
  \n\
  If you are using a local interactive jboss-cli session, the session will be automatically closed. You will need to connect to the local server again. It will ensure \
  that your new session uses the most recent changes available on the local installation.

installer.revert.option.repositories.description=\
  A collection of Maven repositories that contains the artifacts required to prepare an installation at the state specified by 'revision' argument. Multiple repositories are separated by comma. \
  Valid values are either URLs or ID::URL pairs. This argument allows you to specify an alternative list of repositories for this revert command, \
  replacing the repositories defined in the subscribed channels.

installer.revert.option.local-cache.description=\
  Path to the local Maven repository cache. It overrides the default Maven repository at ~/.m2/repository. The 'path' value represents the location within the remote machine's file system to which this session is connected.

installer.revert.option.no-resolve-local-cache.description=\
  Perform the operation without resolving or installing artifacts from/into local maven cache.

installer.revert.option.offline.description=\
  Perform installation from local or file-system Maven repositories only.

installer.revert.option.maven-repo-file.description=\
  The location of the local Maven Repository Zip file, containing the necessary artifacts to prepare the server installation we want to apply.

installer.revert.option.revision.description=\
  Hash of an installation state of the previous version you want to revert to.

installer.revert.option.headers.description=\
  Any Operation headers. Depending on the target environment, preparing a server could take some time because all required artifacts needs to be downloaded \
  to provision the candidate installation. You can use Operation headers to increase the default blocking timeout which is 300 seconds.


# Update
installer.update.description=\
  Apply the latest available patches on a server instance.\
  \n\
  \n\
  The update is done in three phases:\
  \n\
  \n\
  List-Updates: Retrieves the list of artifacts that are going to be updated. If --dry-run argument is not specified, the command will ask to confirm \
  such a list and to move to the next phase.This phase can be skipped by using the --confirm flag. --confirm and --dry-run cannot be used at the same time.\
  \n\
  \n\
  Prepare-Update: Prepares the new installation on the target machine. The candidate installation will be prepared on the Server temporal directory \
  (jboss.domain.temp.dir on domain mode or jboss.server.temp.dir on standalone server mode). Once this phase finishes, no more server preparations can be done. \
  At any time the user can clean the installation manager cache to allow the preparation of a different installation. \
  \n\
  \n\
  Apply-Update: Once a server installation is prepared, you can apply it by using the 'shutdown --perform-installation' command. This command will restart \
  the target server and will apply the updates prepared in the previous phase.

installer.update.option.dry-run.description=\
  Executes the command without preparing any installation.

installer.update.option.confirm.description=\
  Executes the command and prepares a candidate installation confirming automatically any available update.

installer.update.option.repositories.description=\
  A collection of Maven repositories that contains the artifacts required to prepare an installation. Multiple repositories are separated by comma. \
  Valid values are either URLs or ID::URL pairs. This argument allows you to specify an alternative list of repositories for this update command, \
  replacing the repositories defined in the subscribed channels.

installer.update.option.local-cache.description=\
  Path to the local Maven repository cache. It overrides the default Maven repository at ~/.m2/repository. The 'path' value represents the location within \
  the remote machine's file system to which this session is connected.

installer.update.option.no-resolve-local-cache.description=\
  Perform the operation without resolving or installing artifacts from/into local maven cache.

installer.update.option.offline.description=\
  Perform installation from local or file-system Maven repositories only.

installer.update.option.maven-repo-file.description=\
  The location of the local Maven Repository Zip file, containing the necessary artifacts to prepare the server installation we want to apply.

installer.update.option.headers.description=\
  Any Operation headers. Depending on the target environment, preparing a server could take some time because all required artifacts needs to be downloaded \
  to provision the candidate installation. You can use Operation headers to increase the default blocking timeout which is 300 seconds.


installer.upload-custom-patch.description=\
  Uploads a custom patch Zip file to the server and subscribes the installation creating a channel to handle this custom patch. Once this custom patch is no \
  longer required for your installation, you can use the clean operation to remove it from the server.

installer.upload-custom-patch.option.custom-patch-file.description=\
  The location of the local Custom Patch Zip file.

installer.upload-custom-patch.option.manifest.description=\
  Location of a Manifest that defines this custom patch channel. This can be either a file path, URL or Maven GAV coordinate (groupId:artifactId:version).\
  If version is omitted in the GAV, the latest available manifest is used, otherwise a requested version of manifest will be used.